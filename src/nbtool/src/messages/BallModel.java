// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BallModel.proto

package messages;

public final class BallModel {
  private BallModel() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface VisionBallOrBuilder extends
      // @@protoc_insertion_point(interface_extends:messages.VisionBall)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional double distance = 1;</code>
     */
    boolean hasDistance();
    /**
     * <code>optional double distance = 1;</code>
     */
    double getDistance();

    /**
     * <code>optional double bearing = 2;</code>
     */
    boolean hasBearing();
    /**
     * <code>optional double bearing = 2;</code>
     */
    double getBearing();

    /**
     * <code>optional double angle_x_deg = 3;</code>
     */
    boolean hasAngleXDeg();
    /**
     * <code>optional double angle_x_deg = 3;</code>
     */
    double getAngleXDeg();

    /**
     * <code>optional double angle_y_deg = 4;</code>
     */
    boolean hasAngleYDeg();
    /**
     * <code>optional double angle_y_deg = 4;</code>
     */
    double getAngleYDeg();

    /**
     * <code>optional double bearing_sd = 5;</code>
     */
    boolean hasBearingSd();
    /**
     * <code>optional double bearing_sd = 5;</code>
     */
    double getBearingSd();

    /**
     * <code>optional bool inTopCam = 6;</code>
     */
    boolean hasInTopCam();
    /**
     * <code>optional bool inTopCam = 6;</code>
     */
    boolean getInTopCam();

    /**
     * <code>optional double radius = 7;</code>
     */
    boolean hasRadius();
    /**
     * <code>optional double radius = 7;</code>
     */
    double getRadius();

    /**
     * <code>optional double confidence = 8;</code>
     */
    boolean hasConfidence();
    /**
     * <code>optional double confidence = 8;</code>
     */
    double getConfidence();

    /**
     * <code>optional bool on = 9;</code>
     */
    boolean hasOn();
    /**
     * <code>optional bool on = 9;</code>
     */
    boolean getOn();

    /**
     * <code>optional sint32 frames_on = 10;</code>
     */
    boolean hasFramesOn();
    /**
     * <code>optional sint32 frames_on = 10;</code>
     */
    int getFramesOn();

    /**
     * <code>optional sint32 frames_off = 11;</code>
     */
    boolean hasFramesOff();
    /**
     * <code>optional sint32 frames_off = 11;</code>
     */
    int getFramesOff();

    /**
     * <code>optional double rel_x_variance = 12;</code>
     */
    boolean hasRelXVariance();
    /**
     * <code>optional double rel_x_variance = 12;</code>
     */
    double getRelXVariance();

    /**
     * <code>optional double rel_y_variance = 13;</code>
     */
    boolean hasRelYVariance();
    /**
     * <code>optional double rel_y_variance = 13;</code>
     */
    double getRelYVariance();

    /**
     * <code>optional double bearing_deg = 14;</code>
     */
    boolean hasBearingDeg();
    /**
     * <code>optional double bearing_deg = 14;</code>
     */
    double getBearingDeg();

    /**
     * <code>optional sint32 x = 15;</code>
     */
    boolean hasX();
    /**
     * <code>optional sint32 x = 15;</code>
     */
    int getX();

    /**
     * <code>optional sint32 y = 16;</code>
     */
    boolean hasY();
    /**
     * <code>optional sint32 y = 16;</code>
     */
    int getY();
  }
  /**
   * Protobuf type {@code messages.VisionBall}
   */
  public static final class VisionBall extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:messages.VisionBall)
      VisionBallOrBuilder {
    // Use VisionBall.newBuilder() to construct.
    private VisionBall(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private VisionBall(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final VisionBall defaultInstance;
    public static VisionBall getDefaultInstance() {
      return defaultInstance;
    }

    public VisionBall getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private VisionBall(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 9: {
              bitField0_ |= 0x00000001;
              distance_ = input.readDouble();
              break;
            }
            case 17: {
              bitField0_ |= 0x00000002;
              bearing_ = input.readDouble();
              break;
            }
            case 25: {
              bitField0_ |= 0x00000004;
              angleXDeg_ = input.readDouble();
              break;
            }
            case 33: {
              bitField0_ |= 0x00000008;
              angleYDeg_ = input.readDouble();
              break;
            }
            case 41: {
              bitField0_ |= 0x00000010;
              bearingSd_ = input.readDouble();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              inTopCam_ = input.readBool();
              break;
            }
            case 57: {
              bitField0_ |= 0x00000040;
              radius_ = input.readDouble();
              break;
            }
            case 65: {
              bitField0_ |= 0x00000080;
              confidence_ = input.readDouble();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000100;
              on_ = input.readBool();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000200;
              framesOn_ = input.readSInt32();
              break;
            }
            case 88: {
              bitField0_ |= 0x00000400;
              framesOff_ = input.readSInt32();
              break;
            }
            case 97: {
              bitField0_ |= 0x00000800;
              relXVariance_ = input.readDouble();
              break;
            }
            case 105: {
              bitField0_ |= 0x00001000;
              relYVariance_ = input.readDouble();
              break;
            }
            case 113: {
              bitField0_ |= 0x00002000;
              bearingDeg_ = input.readDouble();
              break;
            }
            case 120: {
              bitField0_ |= 0x00004000;
              x_ = input.readSInt32();
              break;
            }
            case 128: {
              bitField0_ |= 0x00008000;
              y_ = input.readSInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return messages.BallModel.internal_static_messages_VisionBall_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return messages.BallModel.internal_static_messages_VisionBall_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              messages.BallModel.VisionBall.class, messages.BallModel.VisionBall.Builder.class);
    }

    public static com.google.protobuf.Parser<VisionBall> PARSER =
        new com.google.protobuf.AbstractParser<VisionBall>() {
      public VisionBall parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new VisionBall(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<VisionBall> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int DISTANCE_FIELD_NUMBER = 1;
    private double distance_;
    /**
     * <code>optional double distance = 1;</code>
     */
    public boolean hasDistance() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional double distance = 1;</code>
     */
    public double getDistance() {
      return distance_;
    }

    public static final int BEARING_FIELD_NUMBER = 2;
    private double bearing_;
    /**
     * <code>optional double bearing = 2;</code>
     */
    public boolean hasBearing() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional double bearing = 2;</code>
     */
    public double getBearing() {
      return bearing_;
    }

    public static final int ANGLE_X_DEG_FIELD_NUMBER = 3;
    private double angleXDeg_;
    /**
     * <code>optional double angle_x_deg = 3;</code>
     */
    public boolean hasAngleXDeg() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional double angle_x_deg = 3;</code>
     */
    public double getAngleXDeg() {
      return angleXDeg_;
    }

    public static final int ANGLE_Y_DEG_FIELD_NUMBER = 4;
    private double angleYDeg_;
    /**
     * <code>optional double angle_y_deg = 4;</code>
     */
    public boolean hasAngleYDeg() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional double angle_y_deg = 4;</code>
     */
    public double getAngleYDeg() {
      return angleYDeg_;
    }

    public static final int BEARING_SD_FIELD_NUMBER = 5;
    private double bearingSd_;
    /**
     * <code>optional double bearing_sd = 5;</code>
     */
    public boolean hasBearingSd() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional double bearing_sd = 5;</code>
     */
    public double getBearingSd() {
      return bearingSd_;
    }

    public static final int INTOPCAM_FIELD_NUMBER = 6;
    private boolean inTopCam_;
    /**
     * <code>optional bool inTopCam = 6;</code>
     */
    public boolean hasInTopCam() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional bool inTopCam = 6;</code>
     */
    public boolean getInTopCam() {
      return inTopCam_;
    }

    public static final int RADIUS_FIELD_NUMBER = 7;
    private double radius_;
    /**
     * <code>optional double radius = 7;</code>
     */
    public boolean hasRadius() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional double radius = 7;</code>
     */
    public double getRadius() {
      return radius_;
    }

    public static final int CONFIDENCE_FIELD_NUMBER = 8;
    private double confidence_;
    /**
     * <code>optional double confidence = 8;</code>
     */
    public boolean hasConfidence() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional double confidence = 8;</code>
     */
    public double getConfidence() {
      return confidence_;
    }

    public static final int ON_FIELD_NUMBER = 9;
    private boolean on_;
    /**
     * <code>optional bool on = 9;</code>
     */
    public boolean hasOn() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional bool on = 9;</code>
     */
    public boolean getOn() {
      return on_;
    }

    public static final int FRAMES_ON_FIELD_NUMBER = 10;
    private int framesOn_;
    /**
     * <code>optional sint32 frames_on = 10;</code>
     */
    public boolean hasFramesOn() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional sint32 frames_on = 10;</code>
     */
    public int getFramesOn() {
      return framesOn_;
    }

    public static final int FRAMES_OFF_FIELD_NUMBER = 11;
    private int framesOff_;
    /**
     * <code>optional sint32 frames_off = 11;</code>
     */
    public boolean hasFramesOff() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional sint32 frames_off = 11;</code>
     */
    public int getFramesOff() {
      return framesOff_;
    }

    public static final int REL_X_VARIANCE_FIELD_NUMBER = 12;
    private double relXVariance_;
    /**
     * <code>optional double rel_x_variance = 12;</code>
     */
    public boolean hasRelXVariance() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional double rel_x_variance = 12;</code>
     */
    public double getRelXVariance() {
      return relXVariance_;
    }

    public static final int REL_Y_VARIANCE_FIELD_NUMBER = 13;
    private double relYVariance_;
    /**
     * <code>optional double rel_y_variance = 13;</code>
     */
    public boolean hasRelYVariance() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional double rel_y_variance = 13;</code>
     */
    public double getRelYVariance() {
      return relYVariance_;
    }

    public static final int BEARING_DEG_FIELD_NUMBER = 14;
    private double bearingDeg_;
    /**
     * <code>optional double bearing_deg = 14;</code>
     */
    public boolean hasBearingDeg() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional double bearing_deg = 14;</code>
     */
    public double getBearingDeg() {
      return bearingDeg_;
    }

    public static final int X_FIELD_NUMBER = 15;
    private int x_;
    /**
     * <code>optional sint32 x = 15;</code>
     */
    public boolean hasX() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>optional sint32 x = 15;</code>
     */
    public int getX() {
      return x_;
    }

    public static final int Y_FIELD_NUMBER = 16;
    private int y_;
    /**
     * <code>optional sint32 y = 16;</code>
     */
    public boolean hasY() {
      return ((bitField0_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>optional sint32 y = 16;</code>
     */
    public int getY() {
      return y_;
    }

    private void initFields() {
      distance_ = 0D;
      bearing_ = 0D;
      angleXDeg_ = 0D;
      angleYDeg_ = 0D;
      bearingSd_ = 0D;
      inTopCam_ = false;
      radius_ = 0D;
      confidence_ = 0D;
      on_ = false;
      framesOn_ = 0;
      framesOff_ = 0;
      relXVariance_ = 0D;
      relYVariance_ = 0D;
      bearingDeg_ = 0D;
      x_ = 0;
      y_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeDouble(1, distance_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeDouble(2, bearing_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeDouble(3, angleXDeg_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeDouble(4, angleYDeg_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeDouble(5, bearingSd_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeBool(6, inTopCam_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeDouble(7, radius_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeDouble(8, confidence_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeBool(9, on_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeSInt32(10, framesOn_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeSInt32(11, framesOff_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeDouble(12, relXVariance_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeDouble(13, relYVariance_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeDouble(14, bearingDeg_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        output.writeSInt32(15, x_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        output.writeSInt32(16, y_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(1, distance_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(2, bearing_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(3, angleXDeg_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(4, angleYDeg_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(5, bearingSd_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(6, inTopCam_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(7, radius_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(8, confidence_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(9, on_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(10, framesOn_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(11, framesOff_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(12, relXVariance_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(13, relYVariance_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(14, bearingDeg_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(15, x_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(16, y_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static messages.BallModel.VisionBall parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static messages.BallModel.VisionBall parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static messages.BallModel.VisionBall parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static messages.BallModel.VisionBall parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static messages.BallModel.VisionBall parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static messages.BallModel.VisionBall parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static messages.BallModel.VisionBall parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static messages.BallModel.VisionBall parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static messages.BallModel.VisionBall parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static messages.BallModel.VisionBall parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(messages.BallModel.VisionBall prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code messages.VisionBall}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:messages.VisionBall)
        messages.BallModel.VisionBallOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return messages.BallModel.internal_static_messages_VisionBall_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return messages.BallModel.internal_static_messages_VisionBall_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                messages.BallModel.VisionBall.class, messages.BallModel.VisionBall.Builder.class);
      }

      // Construct using messages.BallModel.VisionBall.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        distance_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000001);
        bearing_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000002);
        angleXDeg_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000004);
        angleYDeg_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000008);
        bearingSd_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000010);
        inTopCam_ = false;
        bitField0_ = (bitField0_ & ~0x00000020);
        radius_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000040);
        confidence_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000080);
        on_ = false;
        bitField0_ = (bitField0_ & ~0x00000100);
        framesOn_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        framesOff_ = 0;
        bitField0_ = (bitField0_ & ~0x00000400);
        relXVariance_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000800);
        relYVariance_ = 0D;
        bitField0_ = (bitField0_ & ~0x00001000);
        bearingDeg_ = 0D;
        bitField0_ = (bitField0_ & ~0x00002000);
        x_ = 0;
        bitField0_ = (bitField0_ & ~0x00004000);
        y_ = 0;
        bitField0_ = (bitField0_ & ~0x00008000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return messages.BallModel.internal_static_messages_VisionBall_descriptor;
      }

      public messages.BallModel.VisionBall getDefaultInstanceForType() {
        return messages.BallModel.VisionBall.getDefaultInstance();
      }

      public messages.BallModel.VisionBall build() {
        messages.BallModel.VisionBall result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public messages.BallModel.VisionBall buildPartial() {
        messages.BallModel.VisionBall result = new messages.BallModel.VisionBall(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.distance_ = distance_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.bearing_ = bearing_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.angleXDeg_ = angleXDeg_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.angleYDeg_ = angleYDeg_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.bearingSd_ = bearingSd_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.inTopCam_ = inTopCam_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.radius_ = radius_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.confidence_ = confidence_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.on_ = on_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.framesOn_ = framesOn_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.framesOff_ = framesOff_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.relXVariance_ = relXVariance_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.relYVariance_ = relYVariance_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00002000;
        }
        result.bearingDeg_ = bearingDeg_;
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00004000;
        }
        result.x_ = x_;
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00008000;
        }
        result.y_ = y_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof messages.BallModel.VisionBall) {
          return mergeFrom((messages.BallModel.VisionBall)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(messages.BallModel.VisionBall other) {
        if (other == messages.BallModel.VisionBall.getDefaultInstance()) return this;
        if (other.hasDistance()) {
          setDistance(other.getDistance());
        }
        if (other.hasBearing()) {
          setBearing(other.getBearing());
        }
        if (other.hasAngleXDeg()) {
          setAngleXDeg(other.getAngleXDeg());
        }
        if (other.hasAngleYDeg()) {
          setAngleYDeg(other.getAngleYDeg());
        }
        if (other.hasBearingSd()) {
          setBearingSd(other.getBearingSd());
        }
        if (other.hasInTopCam()) {
          setInTopCam(other.getInTopCam());
        }
        if (other.hasRadius()) {
          setRadius(other.getRadius());
        }
        if (other.hasConfidence()) {
          setConfidence(other.getConfidence());
        }
        if (other.hasOn()) {
          setOn(other.getOn());
        }
        if (other.hasFramesOn()) {
          setFramesOn(other.getFramesOn());
        }
        if (other.hasFramesOff()) {
          setFramesOff(other.getFramesOff());
        }
        if (other.hasRelXVariance()) {
          setRelXVariance(other.getRelXVariance());
        }
        if (other.hasRelYVariance()) {
          setRelYVariance(other.getRelYVariance());
        }
        if (other.hasBearingDeg()) {
          setBearingDeg(other.getBearingDeg());
        }
        if (other.hasX()) {
          setX(other.getX());
        }
        if (other.hasY()) {
          setY(other.getY());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        messages.BallModel.VisionBall parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (messages.BallModel.VisionBall) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private double distance_ ;
      /**
       * <code>optional double distance = 1;</code>
       */
      public boolean hasDistance() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional double distance = 1;</code>
       */
      public double getDistance() {
        return distance_;
      }
      /**
       * <code>optional double distance = 1;</code>
       */
      public Builder setDistance(double value) {
        bitField0_ |= 0x00000001;
        distance_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double distance = 1;</code>
       */
      public Builder clearDistance() {
        bitField0_ = (bitField0_ & ~0x00000001);
        distance_ = 0D;
        onChanged();
        return this;
      }

      private double bearing_ ;
      /**
       * <code>optional double bearing = 2;</code>
       */
      public boolean hasBearing() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional double bearing = 2;</code>
       */
      public double getBearing() {
        return bearing_;
      }
      /**
       * <code>optional double bearing = 2;</code>
       */
      public Builder setBearing(double value) {
        bitField0_ |= 0x00000002;
        bearing_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double bearing = 2;</code>
       */
      public Builder clearBearing() {
        bitField0_ = (bitField0_ & ~0x00000002);
        bearing_ = 0D;
        onChanged();
        return this;
      }

      private double angleXDeg_ ;
      /**
       * <code>optional double angle_x_deg = 3;</code>
       */
      public boolean hasAngleXDeg() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional double angle_x_deg = 3;</code>
       */
      public double getAngleXDeg() {
        return angleXDeg_;
      }
      /**
       * <code>optional double angle_x_deg = 3;</code>
       */
      public Builder setAngleXDeg(double value) {
        bitField0_ |= 0x00000004;
        angleXDeg_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double angle_x_deg = 3;</code>
       */
      public Builder clearAngleXDeg() {
        bitField0_ = (bitField0_ & ~0x00000004);
        angleXDeg_ = 0D;
        onChanged();
        return this;
      }

      private double angleYDeg_ ;
      /**
       * <code>optional double angle_y_deg = 4;</code>
       */
      public boolean hasAngleYDeg() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional double angle_y_deg = 4;</code>
       */
      public double getAngleYDeg() {
        return angleYDeg_;
      }
      /**
       * <code>optional double angle_y_deg = 4;</code>
       */
      public Builder setAngleYDeg(double value) {
        bitField0_ |= 0x00000008;
        angleYDeg_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double angle_y_deg = 4;</code>
       */
      public Builder clearAngleYDeg() {
        bitField0_ = (bitField0_ & ~0x00000008);
        angleYDeg_ = 0D;
        onChanged();
        return this;
      }

      private double bearingSd_ ;
      /**
       * <code>optional double bearing_sd = 5;</code>
       */
      public boolean hasBearingSd() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional double bearing_sd = 5;</code>
       */
      public double getBearingSd() {
        return bearingSd_;
      }
      /**
       * <code>optional double bearing_sd = 5;</code>
       */
      public Builder setBearingSd(double value) {
        bitField0_ |= 0x00000010;
        bearingSd_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double bearing_sd = 5;</code>
       */
      public Builder clearBearingSd() {
        bitField0_ = (bitField0_ & ~0x00000010);
        bearingSd_ = 0D;
        onChanged();
        return this;
      }

      private boolean inTopCam_ ;
      /**
       * <code>optional bool inTopCam = 6;</code>
       */
      public boolean hasInTopCam() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional bool inTopCam = 6;</code>
       */
      public boolean getInTopCam() {
        return inTopCam_;
      }
      /**
       * <code>optional bool inTopCam = 6;</code>
       */
      public Builder setInTopCam(boolean value) {
        bitField0_ |= 0x00000020;
        inTopCam_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool inTopCam = 6;</code>
       */
      public Builder clearInTopCam() {
        bitField0_ = (bitField0_ & ~0x00000020);
        inTopCam_ = false;
        onChanged();
        return this;
      }

      private double radius_ ;
      /**
       * <code>optional double radius = 7;</code>
       */
      public boolean hasRadius() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional double radius = 7;</code>
       */
      public double getRadius() {
        return radius_;
      }
      /**
       * <code>optional double radius = 7;</code>
       */
      public Builder setRadius(double value) {
        bitField0_ |= 0x00000040;
        radius_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double radius = 7;</code>
       */
      public Builder clearRadius() {
        bitField0_ = (bitField0_ & ~0x00000040);
        radius_ = 0D;
        onChanged();
        return this;
      }

      private double confidence_ ;
      /**
       * <code>optional double confidence = 8;</code>
       */
      public boolean hasConfidence() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional double confidence = 8;</code>
       */
      public double getConfidence() {
        return confidence_;
      }
      /**
       * <code>optional double confidence = 8;</code>
       */
      public Builder setConfidence(double value) {
        bitField0_ |= 0x00000080;
        confidence_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double confidence = 8;</code>
       */
      public Builder clearConfidence() {
        bitField0_ = (bitField0_ & ~0x00000080);
        confidence_ = 0D;
        onChanged();
        return this;
      }

      private boolean on_ ;
      /**
       * <code>optional bool on = 9;</code>
       */
      public boolean hasOn() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional bool on = 9;</code>
       */
      public boolean getOn() {
        return on_;
      }
      /**
       * <code>optional bool on = 9;</code>
       */
      public Builder setOn(boolean value) {
        bitField0_ |= 0x00000100;
        on_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool on = 9;</code>
       */
      public Builder clearOn() {
        bitField0_ = (bitField0_ & ~0x00000100);
        on_ = false;
        onChanged();
        return this;
      }

      private int framesOn_ ;
      /**
       * <code>optional sint32 frames_on = 10;</code>
       */
      public boolean hasFramesOn() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional sint32 frames_on = 10;</code>
       */
      public int getFramesOn() {
        return framesOn_;
      }
      /**
       * <code>optional sint32 frames_on = 10;</code>
       */
      public Builder setFramesOn(int value) {
        bitField0_ |= 0x00000200;
        framesOn_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 frames_on = 10;</code>
       */
      public Builder clearFramesOn() {
        bitField0_ = (bitField0_ & ~0x00000200);
        framesOn_ = 0;
        onChanged();
        return this;
      }

      private int framesOff_ ;
      /**
       * <code>optional sint32 frames_off = 11;</code>
       */
      public boolean hasFramesOff() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional sint32 frames_off = 11;</code>
       */
      public int getFramesOff() {
        return framesOff_;
      }
      /**
       * <code>optional sint32 frames_off = 11;</code>
       */
      public Builder setFramesOff(int value) {
        bitField0_ |= 0x00000400;
        framesOff_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 frames_off = 11;</code>
       */
      public Builder clearFramesOff() {
        bitField0_ = (bitField0_ & ~0x00000400);
        framesOff_ = 0;
        onChanged();
        return this;
      }

      private double relXVariance_ ;
      /**
       * <code>optional double rel_x_variance = 12;</code>
       */
      public boolean hasRelXVariance() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional double rel_x_variance = 12;</code>
       */
      public double getRelXVariance() {
        return relXVariance_;
      }
      /**
       * <code>optional double rel_x_variance = 12;</code>
       */
      public Builder setRelXVariance(double value) {
        bitField0_ |= 0x00000800;
        relXVariance_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double rel_x_variance = 12;</code>
       */
      public Builder clearRelXVariance() {
        bitField0_ = (bitField0_ & ~0x00000800);
        relXVariance_ = 0D;
        onChanged();
        return this;
      }

      private double relYVariance_ ;
      /**
       * <code>optional double rel_y_variance = 13;</code>
       */
      public boolean hasRelYVariance() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional double rel_y_variance = 13;</code>
       */
      public double getRelYVariance() {
        return relYVariance_;
      }
      /**
       * <code>optional double rel_y_variance = 13;</code>
       */
      public Builder setRelYVariance(double value) {
        bitField0_ |= 0x00001000;
        relYVariance_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double rel_y_variance = 13;</code>
       */
      public Builder clearRelYVariance() {
        bitField0_ = (bitField0_ & ~0x00001000);
        relYVariance_ = 0D;
        onChanged();
        return this;
      }

      private double bearingDeg_ ;
      /**
       * <code>optional double bearing_deg = 14;</code>
       */
      public boolean hasBearingDeg() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional double bearing_deg = 14;</code>
       */
      public double getBearingDeg() {
        return bearingDeg_;
      }
      /**
       * <code>optional double bearing_deg = 14;</code>
       */
      public Builder setBearingDeg(double value) {
        bitField0_ |= 0x00002000;
        bearingDeg_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double bearing_deg = 14;</code>
       */
      public Builder clearBearingDeg() {
        bitField0_ = (bitField0_ & ~0x00002000);
        bearingDeg_ = 0D;
        onChanged();
        return this;
      }

      private int x_ ;
      /**
       * <code>optional sint32 x = 15;</code>
       */
      public boolean hasX() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional sint32 x = 15;</code>
       */
      public int getX() {
        return x_;
      }
      /**
       * <code>optional sint32 x = 15;</code>
       */
      public Builder setX(int value) {
        bitField0_ |= 0x00004000;
        x_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 x = 15;</code>
       */
      public Builder clearX() {
        bitField0_ = (bitField0_ & ~0x00004000);
        x_ = 0;
        onChanged();
        return this;
      }

      private int y_ ;
      /**
       * <code>optional sint32 y = 16;</code>
       */
      public boolean hasY() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional sint32 y = 16;</code>
       */
      public int getY() {
        return y_;
      }
      /**
       * <code>optional sint32 y = 16;</code>
       */
      public Builder setY(int value) {
        bitField0_ |= 0x00008000;
        y_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 y = 16;</code>
       */
      public Builder clearY() {
        bitField0_ = (bitField0_ & ~0x00008000);
        y_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:messages.VisionBall)
    }

    static {
      defaultInstance = new VisionBall(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:messages.VisionBall)
  }

  public interface FilteredBallOrBuilder extends
      // @@protoc_insertion_point(interface_extends:messages.FilteredBall)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional .messages.VisionBall vis = 1;</code>
     */
    boolean hasVis();
    /**
     * <code>optional .messages.VisionBall vis = 1;</code>
     */
    messages.BallModel.VisionBall getVis();
    /**
     * <code>optional .messages.VisionBall vis = 1;</code>
     */
    messages.BallModel.VisionBallOrBuilder getVisOrBuilder();

    /**
     * <code>optional float distance = 2;</code>
     */
    boolean hasDistance();
    /**
     * <code>optional float distance = 2;</code>
     */
    float getDistance();

    /**
     * <code>optional float bearing = 3;</code>
     */
    boolean hasBearing();
    /**
     * <code>optional float bearing = 3;</code>
     */
    float getBearing();

    /**
     * <code>optional float rel_x = 4;</code>
     *
     * <pre>
     * State of best filter
     * </pre>
     */
    boolean hasRelX();
    /**
     * <code>optional float rel_x = 4;</code>
     *
     * <pre>
     * State of best filter
     * </pre>
     */
    float getRelX();

    /**
     * <code>optional float rel_y = 5;</code>
     */
    boolean hasRelY();
    /**
     * <code>optional float rel_y = 5;</code>
     */
    float getRelY();

    /**
     * <code>optional float vel_x = 6;</code>
     */
    boolean hasVelX();
    /**
     * <code>optional float vel_x = 6;</code>
     */
    float getVelX();

    /**
     * <code>optional float vel_y = 7;</code>
     */
    boolean hasVelY();
    /**
     * <code>optional float vel_y = 7;</code>
     */
    float getVelY();

    /**
     * <code>optional float var_rel_x = 8;</code>
     */
    boolean hasVarRelX();
    /**
     * <code>optional float var_rel_x = 8;</code>
     */
    float getVarRelX();

    /**
     * <code>optional float var_rel_y = 9;</code>
     */
    boolean hasVarRelY();
    /**
     * <code>optional float var_rel_y = 9;</code>
     */
    float getVarRelY();

    /**
     * <code>optional float var_vel_x = 10;</code>
     */
    boolean hasVarVelX();
    /**
     * <code>optional float var_vel_x = 10;</code>
     */
    float getVarVelX();

    /**
     * <code>optional float var_vel_y = 11;</code>
     */
    boolean hasVarVelY();
    /**
     * <code>optional float var_vel_y = 11;</code>
     */
    float getVarVelY();

    /**
     * <code>optional bool is_stationary = 12;</code>
     */
    boolean hasIsStationary();
    /**
     * <code>optional bool is_stationary = 12;</code>
     */
    boolean getIsStationary();

    /**
     * <code>optional float bearing_deg = 13;</code>
     */
    boolean hasBearingDeg();
    /**
     * <code>optional float bearing_deg = 13;</code>
     */
    float getBearingDeg();

    /**
     * <code>optional float x = 14;</code>
     */
    boolean hasX();
    /**
     * <code>optional float x = 14;</code>
     */
    float getX();

    /**
     * <code>optional float y = 15;</code>
     */
    boolean hasY();
    /**
     * <code>optional float y = 15;</code>
     */
    float getY();

    /**
     * <code>optional float rel_x_dest = 16;</code>
     */
    boolean hasRelXDest();
    /**
     * <code>optional float rel_x_dest = 16;</code>
     */
    float getRelXDest();

    /**
     * <code>optional float rel_y_dest = 17;</code>
     */
    boolean hasRelYDest();
    /**
     * <code>optional float rel_y_dest = 17;</code>
     */
    float getRelYDest();

    /**
     * <code>optional float speed = 18;</code>
     *
     * <pre>
     * For Goalie, know where the ball is going to intersect y-axis
     * </pre>
     */
    boolean hasSpeed();
    /**
     * <code>optional float speed = 18;</code>
     *
     * <pre>
     * For Goalie, know where the ball is going to intersect y-axis
     * </pre>
     */
    float getSpeed();

    /**
     * <code>optional float rel_y_intersect_dest = 19;</code>
     */
    boolean hasRelYIntersectDest();
    /**
     * <code>optional float rel_y_intersect_dest = 19;</code>
     */
    float getRelYIntersectDest();

    /**
     * <code>optional float stat_rel_x = 20;</code>
     */
    boolean hasStatRelX();
    /**
     * <code>optional float stat_rel_x = 20;</code>
     */
    float getStatRelX();

    /**
     * <code>optional float stat_rel_y = 21;</code>
     */
    boolean hasStatRelY();
    /**
     * <code>optional float stat_rel_y = 21;</code>
     */
    float getStatRelY();

    /**
     * <code>optional float stat_distance = 22;</code>
     */
    boolean hasStatDistance();
    /**
     * <code>optional float stat_distance = 22;</code>
     */
    float getStatDistance();

    /**
     * <code>optional float stat_bearing = 23;</code>
     */
    boolean hasStatBearing();
    /**
     * <code>optional float stat_bearing = 23;</code>
     */
    float getStatBearing();

    /**
     * <code>optional float mov_rel_x = 24;</code>
     */
    boolean hasMovRelX();
    /**
     * <code>optional float mov_rel_x = 24;</code>
     */
    float getMovRelX();

    /**
     * <code>optional float mov_rel_y = 25;</code>
     */
    boolean hasMovRelY();
    /**
     * <code>optional float mov_rel_y = 25;</code>
     */
    float getMovRelY();

    /**
     * <code>optional float mov_distance = 26;</code>
     */
    boolean hasMovDistance();
    /**
     * <code>optional float mov_distance = 26;</code>
     */
    float getMovDistance();

    /**
     * <code>optional float mov_bearing = 27;</code>
     */
    boolean hasMovBearing();
    /**
     * <code>optional float mov_bearing = 27;</code>
     */
    float getMovBearing();

    /**
     * <code>optional float mov_vel_x = 28;</code>
     */
    boolean hasMovVelX();
    /**
     * <code>optional float mov_vel_x = 28;</code>
     */
    float getMovVelX();

    /**
     * <code>optional float mov_vel_y = 29;</code>
     */
    boolean hasMovVelY();
    /**
     * <code>optional float mov_vel_y = 29;</code>
     */
    float getMovVelY();

    /**
     * <code>optional float mov_speed = 30;</code>
     */
    boolean hasMovSpeed();
    /**
     * <code>optional float mov_speed = 30;</code>
     */
    float getMovSpeed();
  }
  /**
   * Protobuf type {@code messages.FilteredBall}
   */
  public static final class FilteredBall extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:messages.FilteredBall)
      FilteredBallOrBuilder {
    // Use FilteredBall.newBuilder() to construct.
    private FilteredBall(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private FilteredBall(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final FilteredBall defaultInstance;
    public static FilteredBall getDefaultInstance() {
      return defaultInstance;
    }

    public FilteredBall getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private FilteredBall(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              messages.BallModel.VisionBall.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = vis_.toBuilder();
              }
              vis_ = input.readMessage(messages.BallModel.VisionBall.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(vis_);
                vis_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 21: {
              bitField0_ |= 0x00000002;
              distance_ = input.readFloat();
              break;
            }
            case 29: {
              bitField0_ |= 0x00000004;
              bearing_ = input.readFloat();
              break;
            }
            case 37: {
              bitField0_ |= 0x00000008;
              relX_ = input.readFloat();
              break;
            }
            case 45: {
              bitField0_ |= 0x00000010;
              relY_ = input.readFloat();
              break;
            }
            case 53: {
              bitField0_ |= 0x00000020;
              velX_ = input.readFloat();
              break;
            }
            case 61: {
              bitField0_ |= 0x00000040;
              velY_ = input.readFloat();
              break;
            }
            case 69: {
              bitField0_ |= 0x00000080;
              varRelX_ = input.readFloat();
              break;
            }
            case 77: {
              bitField0_ |= 0x00000100;
              varRelY_ = input.readFloat();
              break;
            }
            case 85: {
              bitField0_ |= 0x00000200;
              varVelX_ = input.readFloat();
              break;
            }
            case 93: {
              bitField0_ |= 0x00000400;
              varVelY_ = input.readFloat();
              break;
            }
            case 96: {
              bitField0_ |= 0x00000800;
              isStationary_ = input.readBool();
              break;
            }
            case 109: {
              bitField0_ |= 0x00001000;
              bearingDeg_ = input.readFloat();
              break;
            }
            case 117: {
              bitField0_ |= 0x00002000;
              x_ = input.readFloat();
              break;
            }
            case 125: {
              bitField0_ |= 0x00004000;
              y_ = input.readFloat();
              break;
            }
            case 133: {
              bitField0_ |= 0x00008000;
              relXDest_ = input.readFloat();
              break;
            }
            case 141: {
              bitField0_ |= 0x00010000;
              relYDest_ = input.readFloat();
              break;
            }
            case 149: {
              bitField0_ |= 0x00020000;
              speed_ = input.readFloat();
              break;
            }
            case 157: {
              bitField0_ |= 0x00040000;
              relYIntersectDest_ = input.readFloat();
              break;
            }
            case 165: {
              bitField0_ |= 0x00080000;
              statRelX_ = input.readFloat();
              break;
            }
            case 173: {
              bitField0_ |= 0x00100000;
              statRelY_ = input.readFloat();
              break;
            }
            case 181: {
              bitField0_ |= 0x00200000;
              statDistance_ = input.readFloat();
              break;
            }
            case 189: {
              bitField0_ |= 0x00400000;
              statBearing_ = input.readFloat();
              break;
            }
            case 197: {
              bitField0_ |= 0x00800000;
              movRelX_ = input.readFloat();
              break;
            }
            case 205: {
              bitField0_ |= 0x01000000;
              movRelY_ = input.readFloat();
              break;
            }
            case 213: {
              bitField0_ |= 0x02000000;
              movDistance_ = input.readFloat();
              break;
            }
            case 221: {
              bitField0_ |= 0x04000000;
              movBearing_ = input.readFloat();
              break;
            }
            case 229: {
              bitField0_ |= 0x08000000;
              movVelX_ = input.readFloat();
              break;
            }
            case 237: {
              bitField0_ |= 0x10000000;
              movVelY_ = input.readFloat();
              break;
            }
            case 245: {
              bitField0_ |= 0x20000000;
              movSpeed_ = input.readFloat();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return messages.BallModel.internal_static_messages_FilteredBall_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return messages.BallModel.internal_static_messages_FilteredBall_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              messages.BallModel.FilteredBall.class, messages.BallModel.FilteredBall.Builder.class);
    }

    public static com.google.protobuf.Parser<FilteredBall> PARSER =
        new com.google.protobuf.AbstractParser<FilteredBall>() {
      public FilteredBall parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new FilteredBall(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<FilteredBall> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int VIS_FIELD_NUMBER = 1;
    private messages.BallModel.VisionBall vis_;
    /**
     * <code>optional .messages.VisionBall vis = 1;</code>
     */
    public boolean hasVis() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .messages.VisionBall vis = 1;</code>
     */
    public messages.BallModel.VisionBall getVis() {
      return vis_;
    }
    /**
     * <code>optional .messages.VisionBall vis = 1;</code>
     */
    public messages.BallModel.VisionBallOrBuilder getVisOrBuilder() {
      return vis_;
    }

    public static final int DISTANCE_FIELD_NUMBER = 2;
    private float distance_;
    /**
     * <code>optional float distance = 2;</code>
     */
    public boolean hasDistance() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional float distance = 2;</code>
     */
    public float getDistance() {
      return distance_;
    }

    public static final int BEARING_FIELD_NUMBER = 3;
    private float bearing_;
    /**
     * <code>optional float bearing = 3;</code>
     */
    public boolean hasBearing() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional float bearing = 3;</code>
     */
    public float getBearing() {
      return bearing_;
    }

    public static final int REL_X_FIELD_NUMBER = 4;
    private float relX_;
    /**
     * <code>optional float rel_x = 4;</code>
     *
     * <pre>
     * State of best filter
     * </pre>
     */
    public boolean hasRelX() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional float rel_x = 4;</code>
     *
     * <pre>
     * State of best filter
     * </pre>
     */
    public float getRelX() {
      return relX_;
    }

    public static final int REL_Y_FIELD_NUMBER = 5;
    private float relY_;
    /**
     * <code>optional float rel_y = 5;</code>
     */
    public boolean hasRelY() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional float rel_y = 5;</code>
     */
    public float getRelY() {
      return relY_;
    }

    public static final int VEL_X_FIELD_NUMBER = 6;
    private float velX_;
    /**
     * <code>optional float vel_x = 6;</code>
     */
    public boolean hasVelX() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional float vel_x = 6;</code>
     */
    public float getVelX() {
      return velX_;
    }

    public static final int VEL_Y_FIELD_NUMBER = 7;
    private float velY_;
    /**
     * <code>optional float vel_y = 7;</code>
     */
    public boolean hasVelY() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional float vel_y = 7;</code>
     */
    public float getVelY() {
      return velY_;
    }

    public static final int VAR_REL_X_FIELD_NUMBER = 8;
    private float varRelX_;
    /**
     * <code>optional float var_rel_x = 8;</code>
     */
    public boolean hasVarRelX() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional float var_rel_x = 8;</code>
     */
    public float getVarRelX() {
      return varRelX_;
    }

    public static final int VAR_REL_Y_FIELD_NUMBER = 9;
    private float varRelY_;
    /**
     * <code>optional float var_rel_y = 9;</code>
     */
    public boolean hasVarRelY() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional float var_rel_y = 9;</code>
     */
    public float getVarRelY() {
      return varRelY_;
    }

    public static final int VAR_VEL_X_FIELD_NUMBER = 10;
    private float varVelX_;
    /**
     * <code>optional float var_vel_x = 10;</code>
     */
    public boolean hasVarVelX() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional float var_vel_x = 10;</code>
     */
    public float getVarVelX() {
      return varVelX_;
    }

    public static final int VAR_VEL_Y_FIELD_NUMBER = 11;
    private float varVelY_;
    /**
     * <code>optional float var_vel_y = 11;</code>
     */
    public boolean hasVarVelY() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional float var_vel_y = 11;</code>
     */
    public float getVarVelY() {
      return varVelY_;
    }

    public static final int IS_STATIONARY_FIELD_NUMBER = 12;
    private boolean isStationary_;
    /**
     * <code>optional bool is_stationary = 12;</code>
     */
    public boolean hasIsStationary() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional bool is_stationary = 12;</code>
     */
    public boolean getIsStationary() {
      return isStationary_;
    }

    public static final int BEARING_DEG_FIELD_NUMBER = 13;
    private float bearingDeg_;
    /**
     * <code>optional float bearing_deg = 13;</code>
     */
    public boolean hasBearingDeg() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional float bearing_deg = 13;</code>
     */
    public float getBearingDeg() {
      return bearingDeg_;
    }

    public static final int X_FIELD_NUMBER = 14;
    private float x_;
    /**
     * <code>optional float x = 14;</code>
     */
    public boolean hasX() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional float x = 14;</code>
     */
    public float getX() {
      return x_;
    }

    public static final int Y_FIELD_NUMBER = 15;
    private float y_;
    /**
     * <code>optional float y = 15;</code>
     */
    public boolean hasY() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>optional float y = 15;</code>
     */
    public float getY() {
      return y_;
    }

    public static final int REL_X_DEST_FIELD_NUMBER = 16;
    private float relXDest_;
    /**
     * <code>optional float rel_x_dest = 16;</code>
     */
    public boolean hasRelXDest() {
      return ((bitField0_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>optional float rel_x_dest = 16;</code>
     */
    public float getRelXDest() {
      return relXDest_;
    }

    public static final int REL_Y_DEST_FIELD_NUMBER = 17;
    private float relYDest_;
    /**
     * <code>optional float rel_y_dest = 17;</code>
     */
    public boolean hasRelYDest() {
      return ((bitField0_ & 0x00010000) == 0x00010000);
    }
    /**
     * <code>optional float rel_y_dest = 17;</code>
     */
    public float getRelYDest() {
      return relYDest_;
    }

    public static final int SPEED_FIELD_NUMBER = 18;
    private float speed_;
    /**
     * <code>optional float speed = 18;</code>
     *
     * <pre>
     * For Goalie, know where the ball is going to intersect y-axis
     * </pre>
     */
    public boolean hasSpeed() {
      return ((bitField0_ & 0x00020000) == 0x00020000);
    }
    /**
     * <code>optional float speed = 18;</code>
     *
     * <pre>
     * For Goalie, know where the ball is going to intersect y-axis
     * </pre>
     */
    public float getSpeed() {
      return speed_;
    }

    public static final int REL_Y_INTERSECT_DEST_FIELD_NUMBER = 19;
    private float relYIntersectDest_;
    /**
     * <code>optional float rel_y_intersect_dest = 19;</code>
     */
    public boolean hasRelYIntersectDest() {
      return ((bitField0_ & 0x00040000) == 0x00040000);
    }
    /**
     * <code>optional float rel_y_intersect_dest = 19;</code>
     */
    public float getRelYIntersectDest() {
      return relYIntersectDest_;
    }

    public static final int STAT_REL_X_FIELD_NUMBER = 20;
    private float statRelX_;
    /**
     * <code>optional float stat_rel_x = 20;</code>
     */
    public boolean hasStatRelX() {
      return ((bitField0_ & 0x00080000) == 0x00080000);
    }
    /**
     * <code>optional float stat_rel_x = 20;</code>
     */
    public float getStatRelX() {
      return statRelX_;
    }

    public static final int STAT_REL_Y_FIELD_NUMBER = 21;
    private float statRelY_;
    /**
     * <code>optional float stat_rel_y = 21;</code>
     */
    public boolean hasStatRelY() {
      return ((bitField0_ & 0x00100000) == 0x00100000);
    }
    /**
     * <code>optional float stat_rel_y = 21;</code>
     */
    public float getStatRelY() {
      return statRelY_;
    }

    public static final int STAT_DISTANCE_FIELD_NUMBER = 22;
    private float statDistance_;
    /**
     * <code>optional float stat_distance = 22;</code>
     */
    public boolean hasStatDistance() {
      return ((bitField0_ & 0x00200000) == 0x00200000);
    }
    /**
     * <code>optional float stat_distance = 22;</code>
     */
    public float getStatDistance() {
      return statDistance_;
    }

    public static final int STAT_BEARING_FIELD_NUMBER = 23;
    private float statBearing_;
    /**
     * <code>optional float stat_bearing = 23;</code>
     */
    public boolean hasStatBearing() {
      return ((bitField0_ & 0x00400000) == 0x00400000);
    }
    /**
     * <code>optional float stat_bearing = 23;</code>
     */
    public float getStatBearing() {
      return statBearing_;
    }

    public static final int MOV_REL_X_FIELD_NUMBER = 24;
    private float movRelX_;
    /**
     * <code>optional float mov_rel_x = 24;</code>
     */
    public boolean hasMovRelX() {
      return ((bitField0_ & 0x00800000) == 0x00800000);
    }
    /**
     * <code>optional float mov_rel_x = 24;</code>
     */
    public float getMovRelX() {
      return movRelX_;
    }

    public static final int MOV_REL_Y_FIELD_NUMBER = 25;
    private float movRelY_;
    /**
     * <code>optional float mov_rel_y = 25;</code>
     */
    public boolean hasMovRelY() {
      return ((bitField0_ & 0x01000000) == 0x01000000);
    }
    /**
     * <code>optional float mov_rel_y = 25;</code>
     */
    public float getMovRelY() {
      return movRelY_;
    }

    public static final int MOV_DISTANCE_FIELD_NUMBER = 26;
    private float movDistance_;
    /**
     * <code>optional float mov_distance = 26;</code>
     */
    public boolean hasMovDistance() {
      return ((bitField0_ & 0x02000000) == 0x02000000);
    }
    /**
     * <code>optional float mov_distance = 26;</code>
     */
    public float getMovDistance() {
      return movDistance_;
    }

    public static final int MOV_BEARING_FIELD_NUMBER = 27;
    private float movBearing_;
    /**
     * <code>optional float mov_bearing = 27;</code>
     */
    public boolean hasMovBearing() {
      return ((bitField0_ & 0x04000000) == 0x04000000);
    }
    /**
     * <code>optional float mov_bearing = 27;</code>
     */
    public float getMovBearing() {
      return movBearing_;
    }

    public static final int MOV_VEL_X_FIELD_NUMBER = 28;
    private float movVelX_;
    /**
     * <code>optional float mov_vel_x = 28;</code>
     */
    public boolean hasMovVelX() {
      return ((bitField0_ & 0x08000000) == 0x08000000);
    }
    /**
     * <code>optional float mov_vel_x = 28;</code>
     */
    public float getMovVelX() {
      return movVelX_;
    }

    public static final int MOV_VEL_Y_FIELD_NUMBER = 29;
    private float movVelY_;
    /**
     * <code>optional float mov_vel_y = 29;</code>
     */
    public boolean hasMovVelY() {
      return ((bitField0_ & 0x10000000) == 0x10000000);
    }
    /**
     * <code>optional float mov_vel_y = 29;</code>
     */
    public float getMovVelY() {
      return movVelY_;
    }

    public static final int MOV_SPEED_FIELD_NUMBER = 30;
    private float movSpeed_;
    /**
     * <code>optional float mov_speed = 30;</code>
     */
    public boolean hasMovSpeed() {
      return ((bitField0_ & 0x20000000) == 0x20000000);
    }
    /**
     * <code>optional float mov_speed = 30;</code>
     */
    public float getMovSpeed() {
      return movSpeed_;
    }

    private void initFields() {
      vis_ = messages.BallModel.VisionBall.getDefaultInstance();
      distance_ = 0F;
      bearing_ = 0F;
      relX_ = 0F;
      relY_ = 0F;
      velX_ = 0F;
      velY_ = 0F;
      varRelX_ = 0F;
      varRelY_ = 0F;
      varVelX_ = 0F;
      varVelY_ = 0F;
      isStationary_ = false;
      bearingDeg_ = 0F;
      x_ = 0F;
      y_ = 0F;
      relXDest_ = 0F;
      relYDest_ = 0F;
      speed_ = 0F;
      relYIntersectDest_ = 0F;
      statRelX_ = 0F;
      statRelY_ = 0F;
      statDistance_ = 0F;
      statBearing_ = 0F;
      movRelX_ = 0F;
      movRelY_ = 0F;
      movDistance_ = 0F;
      movBearing_ = 0F;
      movVelX_ = 0F;
      movVelY_ = 0F;
      movSpeed_ = 0F;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, vis_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeFloat(2, distance_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeFloat(3, bearing_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeFloat(4, relX_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeFloat(5, relY_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeFloat(6, velX_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeFloat(7, velY_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeFloat(8, varRelX_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeFloat(9, varRelY_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeFloat(10, varVelX_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeFloat(11, varVelY_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeBool(12, isStationary_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeFloat(13, bearingDeg_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeFloat(14, x_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        output.writeFloat(15, y_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        output.writeFloat(16, relXDest_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        output.writeFloat(17, relYDest_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        output.writeFloat(18, speed_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        output.writeFloat(19, relYIntersectDest_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        output.writeFloat(20, statRelX_);
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        output.writeFloat(21, statRelY_);
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        output.writeFloat(22, statDistance_);
      }
      if (((bitField0_ & 0x00400000) == 0x00400000)) {
        output.writeFloat(23, statBearing_);
      }
      if (((bitField0_ & 0x00800000) == 0x00800000)) {
        output.writeFloat(24, movRelX_);
      }
      if (((bitField0_ & 0x01000000) == 0x01000000)) {
        output.writeFloat(25, movRelY_);
      }
      if (((bitField0_ & 0x02000000) == 0x02000000)) {
        output.writeFloat(26, movDistance_);
      }
      if (((bitField0_ & 0x04000000) == 0x04000000)) {
        output.writeFloat(27, movBearing_);
      }
      if (((bitField0_ & 0x08000000) == 0x08000000)) {
        output.writeFloat(28, movVelX_);
      }
      if (((bitField0_ & 0x10000000) == 0x10000000)) {
        output.writeFloat(29, movVelY_);
      }
      if (((bitField0_ & 0x20000000) == 0x20000000)) {
        output.writeFloat(30, movSpeed_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, vis_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(2, distance_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(3, bearing_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(4, relX_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(5, relY_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(6, velX_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(7, velY_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(8, varRelX_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(9, varRelY_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(10, varVelX_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(11, varVelY_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(12, isStationary_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(13, bearingDeg_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(14, x_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(15, y_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(16, relXDest_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(17, relYDest_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(18, speed_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(19, relYIntersectDest_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(20, statRelX_);
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(21, statRelY_);
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(22, statDistance_);
      }
      if (((bitField0_ & 0x00400000) == 0x00400000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(23, statBearing_);
      }
      if (((bitField0_ & 0x00800000) == 0x00800000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(24, movRelX_);
      }
      if (((bitField0_ & 0x01000000) == 0x01000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(25, movRelY_);
      }
      if (((bitField0_ & 0x02000000) == 0x02000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(26, movDistance_);
      }
      if (((bitField0_ & 0x04000000) == 0x04000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(27, movBearing_);
      }
      if (((bitField0_ & 0x08000000) == 0x08000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(28, movVelX_);
      }
      if (((bitField0_ & 0x10000000) == 0x10000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(29, movVelY_);
      }
      if (((bitField0_ & 0x20000000) == 0x20000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(30, movSpeed_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static messages.BallModel.FilteredBall parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static messages.BallModel.FilteredBall parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static messages.BallModel.FilteredBall parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static messages.BallModel.FilteredBall parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static messages.BallModel.FilteredBall parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static messages.BallModel.FilteredBall parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static messages.BallModel.FilteredBall parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static messages.BallModel.FilteredBall parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static messages.BallModel.FilteredBall parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static messages.BallModel.FilteredBall parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(messages.BallModel.FilteredBall prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code messages.FilteredBall}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:messages.FilteredBall)
        messages.BallModel.FilteredBallOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return messages.BallModel.internal_static_messages_FilteredBall_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return messages.BallModel.internal_static_messages_FilteredBall_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                messages.BallModel.FilteredBall.class, messages.BallModel.FilteredBall.Builder.class);
      }

      // Construct using messages.BallModel.FilteredBall.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getVisFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (visBuilder_ == null) {
          vis_ = messages.BallModel.VisionBall.getDefaultInstance();
        } else {
          visBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        distance_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000002);
        bearing_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000004);
        relX_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000008);
        relY_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000010);
        velX_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000020);
        velY_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000040);
        varRelX_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000080);
        varRelY_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000100);
        varVelX_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000200);
        varVelY_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000400);
        isStationary_ = false;
        bitField0_ = (bitField0_ & ~0x00000800);
        bearingDeg_ = 0F;
        bitField0_ = (bitField0_ & ~0x00001000);
        x_ = 0F;
        bitField0_ = (bitField0_ & ~0x00002000);
        y_ = 0F;
        bitField0_ = (bitField0_ & ~0x00004000);
        relXDest_ = 0F;
        bitField0_ = (bitField0_ & ~0x00008000);
        relYDest_ = 0F;
        bitField0_ = (bitField0_ & ~0x00010000);
        speed_ = 0F;
        bitField0_ = (bitField0_ & ~0x00020000);
        relYIntersectDest_ = 0F;
        bitField0_ = (bitField0_ & ~0x00040000);
        statRelX_ = 0F;
        bitField0_ = (bitField0_ & ~0x00080000);
        statRelY_ = 0F;
        bitField0_ = (bitField0_ & ~0x00100000);
        statDistance_ = 0F;
        bitField0_ = (bitField0_ & ~0x00200000);
        statBearing_ = 0F;
        bitField0_ = (bitField0_ & ~0x00400000);
        movRelX_ = 0F;
        bitField0_ = (bitField0_ & ~0x00800000);
        movRelY_ = 0F;
        bitField0_ = (bitField0_ & ~0x01000000);
        movDistance_ = 0F;
        bitField0_ = (bitField0_ & ~0x02000000);
        movBearing_ = 0F;
        bitField0_ = (bitField0_ & ~0x04000000);
        movVelX_ = 0F;
        bitField0_ = (bitField0_ & ~0x08000000);
        movVelY_ = 0F;
        bitField0_ = (bitField0_ & ~0x10000000);
        movSpeed_ = 0F;
        bitField0_ = (bitField0_ & ~0x20000000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return messages.BallModel.internal_static_messages_FilteredBall_descriptor;
      }

      public messages.BallModel.FilteredBall getDefaultInstanceForType() {
        return messages.BallModel.FilteredBall.getDefaultInstance();
      }

      public messages.BallModel.FilteredBall build() {
        messages.BallModel.FilteredBall result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public messages.BallModel.FilteredBall buildPartial() {
        messages.BallModel.FilteredBall result = new messages.BallModel.FilteredBall(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (visBuilder_ == null) {
          result.vis_ = vis_;
        } else {
          result.vis_ = visBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.distance_ = distance_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.bearing_ = bearing_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.relX_ = relX_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.relY_ = relY_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.velX_ = velX_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.velY_ = velY_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.varRelX_ = varRelX_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.varRelY_ = varRelY_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.varVelX_ = varVelX_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.varVelY_ = varVelY_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.isStationary_ = isStationary_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.bearingDeg_ = bearingDeg_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00002000;
        }
        result.x_ = x_;
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00004000;
        }
        result.y_ = y_;
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00008000;
        }
        result.relXDest_ = relXDest_;
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00010000;
        }
        result.relYDest_ = relYDest_;
        if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
          to_bitField0_ |= 0x00020000;
        }
        result.speed_ = speed_;
        if (((from_bitField0_ & 0x00040000) == 0x00040000)) {
          to_bitField0_ |= 0x00040000;
        }
        result.relYIntersectDest_ = relYIntersectDest_;
        if (((from_bitField0_ & 0x00080000) == 0x00080000)) {
          to_bitField0_ |= 0x00080000;
        }
        result.statRelX_ = statRelX_;
        if (((from_bitField0_ & 0x00100000) == 0x00100000)) {
          to_bitField0_ |= 0x00100000;
        }
        result.statRelY_ = statRelY_;
        if (((from_bitField0_ & 0x00200000) == 0x00200000)) {
          to_bitField0_ |= 0x00200000;
        }
        result.statDistance_ = statDistance_;
        if (((from_bitField0_ & 0x00400000) == 0x00400000)) {
          to_bitField0_ |= 0x00400000;
        }
        result.statBearing_ = statBearing_;
        if (((from_bitField0_ & 0x00800000) == 0x00800000)) {
          to_bitField0_ |= 0x00800000;
        }
        result.movRelX_ = movRelX_;
        if (((from_bitField0_ & 0x01000000) == 0x01000000)) {
          to_bitField0_ |= 0x01000000;
        }
        result.movRelY_ = movRelY_;
        if (((from_bitField0_ & 0x02000000) == 0x02000000)) {
          to_bitField0_ |= 0x02000000;
        }
        result.movDistance_ = movDistance_;
        if (((from_bitField0_ & 0x04000000) == 0x04000000)) {
          to_bitField0_ |= 0x04000000;
        }
        result.movBearing_ = movBearing_;
        if (((from_bitField0_ & 0x08000000) == 0x08000000)) {
          to_bitField0_ |= 0x08000000;
        }
        result.movVelX_ = movVelX_;
        if (((from_bitField0_ & 0x10000000) == 0x10000000)) {
          to_bitField0_ |= 0x10000000;
        }
        result.movVelY_ = movVelY_;
        if (((from_bitField0_ & 0x20000000) == 0x20000000)) {
          to_bitField0_ |= 0x20000000;
        }
        result.movSpeed_ = movSpeed_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof messages.BallModel.FilteredBall) {
          return mergeFrom((messages.BallModel.FilteredBall)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(messages.BallModel.FilteredBall other) {
        if (other == messages.BallModel.FilteredBall.getDefaultInstance()) return this;
        if (other.hasVis()) {
          mergeVis(other.getVis());
        }
        if (other.hasDistance()) {
          setDistance(other.getDistance());
        }
        if (other.hasBearing()) {
          setBearing(other.getBearing());
        }
        if (other.hasRelX()) {
          setRelX(other.getRelX());
        }
        if (other.hasRelY()) {
          setRelY(other.getRelY());
        }
        if (other.hasVelX()) {
          setVelX(other.getVelX());
        }
        if (other.hasVelY()) {
          setVelY(other.getVelY());
        }
        if (other.hasVarRelX()) {
          setVarRelX(other.getVarRelX());
        }
        if (other.hasVarRelY()) {
          setVarRelY(other.getVarRelY());
        }
        if (other.hasVarVelX()) {
          setVarVelX(other.getVarVelX());
        }
        if (other.hasVarVelY()) {
          setVarVelY(other.getVarVelY());
        }
        if (other.hasIsStationary()) {
          setIsStationary(other.getIsStationary());
        }
        if (other.hasBearingDeg()) {
          setBearingDeg(other.getBearingDeg());
        }
        if (other.hasX()) {
          setX(other.getX());
        }
        if (other.hasY()) {
          setY(other.getY());
        }
        if (other.hasRelXDest()) {
          setRelXDest(other.getRelXDest());
        }
        if (other.hasRelYDest()) {
          setRelYDest(other.getRelYDest());
        }
        if (other.hasSpeed()) {
          setSpeed(other.getSpeed());
        }
        if (other.hasRelYIntersectDest()) {
          setRelYIntersectDest(other.getRelYIntersectDest());
        }
        if (other.hasStatRelX()) {
          setStatRelX(other.getStatRelX());
        }
        if (other.hasStatRelY()) {
          setStatRelY(other.getStatRelY());
        }
        if (other.hasStatDistance()) {
          setStatDistance(other.getStatDistance());
        }
        if (other.hasStatBearing()) {
          setStatBearing(other.getStatBearing());
        }
        if (other.hasMovRelX()) {
          setMovRelX(other.getMovRelX());
        }
        if (other.hasMovRelY()) {
          setMovRelY(other.getMovRelY());
        }
        if (other.hasMovDistance()) {
          setMovDistance(other.getMovDistance());
        }
        if (other.hasMovBearing()) {
          setMovBearing(other.getMovBearing());
        }
        if (other.hasMovVelX()) {
          setMovVelX(other.getMovVelX());
        }
        if (other.hasMovVelY()) {
          setMovVelY(other.getMovVelY());
        }
        if (other.hasMovSpeed()) {
          setMovSpeed(other.getMovSpeed());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        messages.BallModel.FilteredBall parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (messages.BallModel.FilteredBall) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private messages.BallModel.VisionBall vis_ = messages.BallModel.VisionBall.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          messages.BallModel.VisionBall, messages.BallModel.VisionBall.Builder, messages.BallModel.VisionBallOrBuilder> visBuilder_;
      /**
       * <code>optional .messages.VisionBall vis = 1;</code>
       */
      public boolean hasVis() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .messages.VisionBall vis = 1;</code>
       */
      public messages.BallModel.VisionBall getVis() {
        if (visBuilder_ == null) {
          return vis_;
        } else {
          return visBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .messages.VisionBall vis = 1;</code>
       */
      public Builder setVis(messages.BallModel.VisionBall value) {
        if (visBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          vis_ = value;
          onChanged();
        } else {
          visBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .messages.VisionBall vis = 1;</code>
       */
      public Builder setVis(
          messages.BallModel.VisionBall.Builder builderForValue) {
        if (visBuilder_ == null) {
          vis_ = builderForValue.build();
          onChanged();
        } else {
          visBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .messages.VisionBall vis = 1;</code>
       */
      public Builder mergeVis(messages.BallModel.VisionBall value) {
        if (visBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              vis_ != messages.BallModel.VisionBall.getDefaultInstance()) {
            vis_ =
              messages.BallModel.VisionBall.newBuilder(vis_).mergeFrom(value).buildPartial();
          } else {
            vis_ = value;
          }
          onChanged();
        } else {
          visBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .messages.VisionBall vis = 1;</code>
       */
      public Builder clearVis() {
        if (visBuilder_ == null) {
          vis_ = messages.BallModel.VisionBall.getDefaultInstance();
          onChanged();
        } else {
          visBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>optional .messages.VisionBall vis = 1;</code>
       */
      public messages.BallModel.VisionBall.Builder getVisBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getVisFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .messages.VisionBall vis = 1;</code>
       */
      public messages.BallModel.VisionBallOrBuilder getVisOrBuilder() {
        if (visBuilder_ != null) {
          return visBuilder_.getMessageOrBuilder();
        } else {
          return vis_;
        }
      }
      /**
       * <code>optional .messages.VisionBall vis = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          messages.BallModel.VisionBall, messages.BallModel.VisionBall.Builder, messages.BallModel.VisionBallOrBuilder> 
          getVisFieldBuilder() {
        if (visBuilder_ == null) {
          visBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              messages.BallModel.VisionBall, messages.BallModel.VisionBall.Builder, messages.BallModel.VisionBallOrBuilder>(
                  getVis(),
                  getParentForChildren(),
                  isClean());
          vis_ = null;
        }
        return visBuilder_;
      }

      private float distance_ ;
      /**
       * <code>optional float distance = 2;</code>
       */
      public boolean hasDistance() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional float distance = 2;</code>
       */
      public float getDistance() {
        return distance_;
      }
      /**
       * <code>optional float distance = 2;</code>
       */
      public Builder setDistance(float value) {
        bitField0_ |= 0x00000002;
        distance_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float distance = 2;</code>
       */
      public Builder clearDistance() {
        bitField0_ = (bitField0_ & ~0x00000002);
        distance_ = 0F;
        onChanged();
        return this;
      }

      private float bearing_ ;
      /**
       * <code>optional float bearing = 3;</code>
       */
      public boolean hasBearing() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional float bearing = 3;</code>
       */
      public float getBearing() {
        return bearing_;
      }
      /**
       * <code>optional float bearing = 3;</code>
       */
      public Builder setBearing(float value) {
        bitField0_ |= 0x00000004;
        bearing_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float bearing = 3;</code>
       */
      public Builder clearBearing() {
        bitField0_ = (bitField0_ & ~0x00000004);
        bearing_ = 0F;
        onChanged();
        return this;
      }

      private float relX_ ;
      /**
       * <code>optional float rel_x = 4;</code>
       *
       * <pre>
       * State of best filter
       * </pre>
       */
      public boolean hasRelX() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional float rel_x = 4;</code>
       *
       * <pre>
       * State of best filter
       * </pre>
       */
      public float getRelX() {
        return relX_;
      }
      /**
       * <code>optional float rel_x = 4;</code>
       *
       * <pre>
       * State of best filter
       * </pre>
       */
      public Builder setRelX(float value) {
        bitField0_ |= 0x00000008;
        relX_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float rel_x = 4;</code>
       *
       * <pre>
       * State of best filter
       * </pre>
       */
      public Builder clearRelX() {
        bitField0_ = (bitField0_ & ~0x00000008);
        relX_ = 0F;
        onChanged();
        return this;
      }

      private float relY_ ;
      /**
       * <code>optional float rel_y = 5;</code>
       */
      public boolean hasRelY() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional float rel_y = 5;</code>
       */
      public float getRelY() {
        return relY_;
      }
      /**
       * <code>optional float rel_y = 5;</code>
       */
      public Builder setRelY(float value) {
        bitField0_ |= 0x00000010;
        relY_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float rel_y = 5;</code>
       */
      public Builder clearRelY() {
        bitField0_ = (bitField0_ & ~0x00000010);
        relY_ = 0F;
        onChanged();
        return this;
      }

      private float velX_ ;
      /**
       * <code>optional float vel_x = 6;</code>
       */
      public boolean hasVelX() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional float vel_x = 6;</code>
       */
      public float getVelX() {
        return velX_;
      }
      /**
       * <code>optional float vel_x = 6;</code>
       */
      public Builder setVelX(float value) {
        bitField0_ |= 0x00000020;
        velX_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float vel_x = 6;</code>
       */
      public Builder clearVelX() {
        bitField0_ = (bitField0_ & ~0x00000020);
        velX_ = 0F;
        onChanged();
        return this;
      }

      private float velY_ ;
      /**
       * <code>optional float vel_y = 7;</code>
       */
      public boolean hasVelY() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional float vel_y = 7;</code>
       */
      public float getVelY() {
        return velY_;
      }
      /**
       * <code>optional float vel_y = 7;</code>
       */
      public Builder setVelY(float value) {
        bitField0_ |= 0x00000040;
        velY_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float vel_y = 7;</code>
       */
      public Builder clearVelY() {
        bitField0_ = (bitField0_ & ~0x00000040);
        velY_ = 0F;
        onChanged();
        return this;
      }

      private float varRelX_ ;
      /**
       * <code>optional float var_rel_x = 8;</code>
       */
      public boolean hasVarRelX() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional float var_rel_x = 8;</code>
       */
      public float getVarRelX() {
        return varRelX_;
      }
      /**
       * <code>optional float var_rel_x = 8;</code>
       */
      public Builder setVarRelX(float value) {
        bitField0_ |= 0x00000080;
        varRelX_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float var_rel_x = 8;</code>
       */
      public Builder clearVarRelX() {
        bitField0_ = (bitField0_ & ~0x00000080);
        varRelX_ = 0F;
        onChanged();
        return this;
      }

      private float varRelY_ ;
      /**
       * <code>optional float var_rel_y = 9;</code>
       */
      public boolean hasVarRelY() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional float var_rel_y = 9;</code>
       */
      public float getVarRelY() {
        return varRelY_;
      }
      /**
       * <code>optional float var_rel_y = 9;</code>
       */
      public Builder setVarRelY(float value) {
        bitField0_ |= 0x00000100;
        varRelY_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float var_rel_y = 9;</code>
       */
      public Builder clearVarRelY() {
        bitField0_ = (bitField0_ & ~0x00000100);
        varRelY_ = 0F;
        onChanged();
        return this;
      }

      private float varVelX_ ;
      /**
       * <code>optional float var_vel_x = 10;</code>
       */
      public boolean hasVarVelX() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional float var_vel_x = 10;</code>
       */
      public float getVarVelX() {
        return varVelX_;
      }
      /**
       * <code>optional float var_vel_x = 10;</code>
       */
      public Builder setVarVelX(float value) {
        bitField0_ |= 0x00000200;
        varVelX_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float var_vel_x = 10;</code>
       */
      public Builder clearVarVelX() {
        bitField0_ = (bitField0_ & ~0x00000200);
        varVelX_ = 0F;
        onChanged();
        return this;
      }

      private float varVelY_ ;
      /**
       * <code>optional float var_vel_y = 11;</code>
       */
      public boolean hasVarVelY() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional float var_vel_y = 11;</code>
       */
      public float getVarVelY() {
        return varVelY_;
      }
      /**
       * <code>optional float var_vel_y = 11;</code>
       */
      public Builder setVarVelY(float value) {
        bitField0_ |= 0x00000400;
        varVelY_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float var_vel_y = 11;</code>
       */
      public Builder clearVarVelY() {
        bitField0_ = (bitField0_ & ~0x00000400);
        varVelY_ = 0F;
        onChanged();
        return this;
      }

      private boolean isStationary_ ;
      /**
       * <code>optional bool is_stationary = 12;</code>
       */
      public boolean hasIsStationary() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional bool is_stationary = 12;</code>
       */
      public boolean getIsStationary() {
        return isStationary_;
      }
      /**
       * <code>optional bool is_stationary = 12;</code>
       */
      public Builder setIsStationary(boolean value) {
        bitField0_ |= 0x00000800;
        isStationary_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool is_stationary = 12;</code>
       */
      public Builder clearIsStationary() {
        bitField0_ = (bitField0_ & ~0x00000800);
        isStationary_ = false;
        onChanged();
        return this;
      }

      private float bearingDeg_ ;
      /**
       * <code>optional float bearing_deg = 13;</code>
       */
      public boolean hasBearingDeg() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional float bearing_deg = 13;</code>
       */
      public float getBearingDeg() {
        return bearingDeg_;
      }
      /**
       * <code>optional float bearing_deg = 13;</code>
       */
      public Builder setBearingDeg(float value) {
        bitField0_ |= 0x00001000;
        bearingDeg_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float bearing_deg = 13;</code>
       */
      public Builder clearBearingDeg() {
        bitField0_ = (bitField0_ & ~0x00001000);
        bearingDeg_ = 0F;
        onChanged();
        return this;
      }

      private float x_ ;
      /**
       * <code>optional float x = 14;</code>
       */
      public boolean hasX() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional float x = 14;</code>
       */
      public float getX() {
        return x_;
      }
      /**
       * <code>optional float x = 14;</code>
       */
      public Builder setX(float value) {
        bitField0_ |= 0x00002000;
        x_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float x = 14;</code>
       */
      public Builder clearX() {
        bitField0_ = (bitField0_ & ~0x00002000);
        x_ = 0F;
        onChanged();
        return this;
      }

      private float y_ ;
      /**
       * <code>optional float y = 15;</code>
       */
      public boolean hasY() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional float y = 15;</code>
       */
      public float getY() {
        return y_;
      }
      /**
       * <code>optional float y = 15;</code>
       */
      public Builder setY(float value) {
        bitField0_ |= 0x00004000;
        y_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float y = 15;</code>
       */
      public Builder clearY() {
        bitField0_ = (bitField0_ & ~0x00004000);
        y_ = 0F;
        onChanged();
        return this;
      }

      private float relXDest_ ;
      /**
       * <code>optional float rel_x_dest = 16;</code>
       */
      public boolean hasRelXDest() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional float rel_x_dest = 16;</code>
       */
      public float getRelXDest() {
        return relXDest_;
      }
      /**
       * <code>optional float rel_x_dest = 16;</code>
       */
      public Builder setRelXDest(float value) {
        bitField0_ |= 0x00008000;
        relXDest_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float rel_x_dest = 16;</code>
       */
      public Builder clearRelXDest() {
        bitField0_ = (bitField0_ & ~0x00008000);
        relXDest_ = 0F;
        onChanged();
        return this;
      }

      private float relYDest_ ;
      /**
       * <code>optional float rel_y_dest = 17;</code>
       */
      public boolean hasRelYDest() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>optional float rel_y_dest = 17;</code>
       */
      public float getRelYDest() {
        return relYDest_;
      }
      /**
       * <code>optional float rel_y_dest = 17;</code>
       */
      public Builder setRelYDest(float value) {
        bitField0_ |= 0x00010000;
        relYDest_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float rel_y_dest = 17;</code>
       */
      public Builder clearRelYDest() {
        bitField0_ = (bitField0_ & ~0x00010000);
        relYDest_ = 0F;
        onChanged();
        return this;
      }

      private float speed_ ;
      /**
       * <code>optional float speed = 18;</code>
       *
       * <pre>
       * For Goalie, know where the ball is going to intersect y-axis
       * </pre>
       */
      public boolean hasSpeed() {
        return ((bitField0_ & 0x00020000) == 0x00020000);
      }
      /**
       * <code>optional float speed = 18;</code>
       *
       * <pre>
       * For Goalie, know where the ball is going to intersect y-axis
       * </pre>
       */
      public float getSpeed() {
        return speed_;
      }
      /**
       * <code>optional float speed = 18;</code>
       *
       * <pre>
       * For Goalie, know where the ball is going to intersect y-axis
       * </pre>
       */
      public Builder setSpeed(float value) {
        bitField0_ |= 0x00020000;
        speed_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float speed = 18;</code>
       *
       * <pre>
       * For Goalie, know where the ball is going to intersect y-axis
       * </pre>
       */
      public Builder clearSpeed() {
        bitField0_ = (bitField0_ & ~0x00020000);
        speed_ = 0F;
        onChanged();
        return this;
      }

      private float relYIntersectDest_ ;
      /**
       * <code>optional float rel_y_intersect_dest = 19;</code>
       */
      public boolean hasRelYIntersectDest() {
        return ((bitField0_ & 0x00040000) == 0x00040000);
      }
      /**
       * <code>optional float rel_y_intersect_dest = 19;</code>
       */
      public float getRelYIntersectDest() {
        return relYIntersectDest_;
      }
      /**
       * <code>optional float rel_y_intersect_dest = 19;</code>
       */
      public Builder setRelYIntersectDest(float value) {
        bitField0_ |= 0x00040000;
        relYIntersectDest_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float rel_y_intersect_dest = 19;</code>
       */
      public Builder clearRelYIntersectDest() {
        bitField0_ = (bitField0_ & ~0x00040000);
        relYIntersectDest_ = 0F;
        onChanged();
        return this;
      }

      private float statRelX_ ;
      /**
       * <code>optional float stat_rel_x = 20;</code>
       */
      public boolean hasStatRelX() {
        return ((bitField0_ & 0x00080000) == 0x00080000);
      }
      /**
       * <code>optional float stat_rel_x = 20;</code>
       */
      public float getStatRelX() {
        return statRelX_;
      }
      /**
       * <code>optional float stat_rel_x = 20;</code>
       */
      public Builder setStatRelX(float value) {
        bitField0_ |= 0x00080000;
        statRelX_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float stat_rel_x = 20;</code>
       */
      public Builder clearStatRelX() {
        bitField0_ = (bitField0_ & ~0x00080000);
        statRelX_ = 0F;
        onChanged();
        return this;
      }

      private float statRelY_ ;
      /**
       * <code>optional float stat_rel_y = 21;</code>
       */
      public boolean hasStatRelY() {
        return ((bitField0_ & 0x00100000) == 0x00100000);
      }
      /**
       * <code>optional float stat_rel_y = 21;</code>
       */
      public float getStatRelY() {
        return statRelY_;
      }
      /**
       * <code>optional float stat_rel_y = 21;</code>
       */
      public Builder setStatRelY(float value) {
        bitField0_ |= 0x00100000;
        statRelY_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float stat_rel_y = 21;</code>
       */
      public Builder clearStatRelY() {
        bitField0_ = (bitField0_ & ~0x00100000);
        statRelY_ = 0F;
        onChanged();
        return this;
      }

      private float statDistance_ ;
      /**
       * <code>optional float stat_distance = 22;</code>
       */
      public boolean hasStatDistance() {
        return ((bitField0_ & 0x00200000) == 0x00200000);
      }
      /**
       * <code>optional float stat_distance = 22;</code>
       */
      public float getStatDistance() {
        return statDistance_;
      }
      /**
       * <code>optional float stat_distance = 22;</code>
       */
      public Builder setStatDistance(float value) {
        bitField0_ |= 0x00200000;
        statDistance_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float stat_distance = 22;</code>
       */
      public Builder clearStatDistance() {
        bitField0_ = (bitField0_ & ~0x00200000);
        statDistance_ = 0F;
        onChanged();
        return this;
      }

      private float statBearing_ ;
      /**
       * <code>optional float stat_bearing = 23;</code>
       */
      public boolean hasStatBearing() {
        return ((bitField0_ & 0x00400000) == 0x00400000);
      }
      /**
       * <code>optional float stat_bearing = 23;</code>
       */
      public float getStatBearing() {
        return statBearing_;
      }
      /**
       * <code>optional float stat_bearing = 23;</code>
       */
      public Builder setStatBearing(float value) {
        bitField0_ |= 0x00400000;
        statBearing_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float stat_bearing = 23;</code>
       */
      public Builder clearStatBearing() {
        bitField0_ = (bitField0_ & ~0x00400000);
        statBearing_ = 0F;
        onChanged();
        return this;
      }

      private float movRelX_ ;
      /**
       * <code>optional float mov_rel_x = 24;</code>
       */
      public boolean hasMovRelX() {
        return ((bitField0_ & 0x00800000) == 0x00800000);
      }
      /**
       * <code>optional float mov_rel_x = 24;</code>
       */
      public float getMovRelX() {
        return movRelX_;
      }
      /**
       * <code>optional float mov_rel_x = 24;</code>
       */
      public Builder setMovRelX(float value) {
        bitField0_ |= 0x00800000;
        movRelX_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float mov_rel_x = 24;</code>
       */
      public Builder clearMovRelX() {
        bitField0_ = (bitField0_ & ~0x00800000);
        movRelX_ = 0F;
        onChanged();
        return this;
      }

      private float movRelY_ ;
      /**
       * <code>optional float mov_rel_y = 25;</code>
       */
      public boolean hasMovRelY() {
        return ((bitField0_ & 0x01000000) == 0x01000000);
      }
      /**
       * <code>optional float mov_rel_y = 25;</code>
       */
      public float getMovRelY() {
        return movRelY_;
      }
      /**
       * <code>optional float mov_rel_y = 25;</code>
       */
      public Builder setMovRelY(float value) {
        bitField0_ |= 0x01000000;
        movRelY_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float mov_rel_y = 25;</code>
       */
      public Builder clearMovRelY() {
        bitField0_ = (bitField0_ & ~0x01000000);
        movRelY_ = 0F;
        onChanged();
        return this;
      }

      private float movDistance_ ;
      /**
       * <code>optional float mov_distance = 26;</code>
       */
      public boolean hasMovDistance() {
        return ((bitField0_ & 0x02000000) == 0x02000000);
      }
      /**
       * <code>optional float mov_distance = 26;</code>
       */
      public float getMovDistance() {
        return movDistance_;
      }
      /**
       * <code>optional float mov_distance = 26;</code>
       */
      public Builder setMovDistance(float value) {
        bitField0_ |= 0x02000000;
        movDistance_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float mov_distance = 26;</code>
       */
      public Builder clearMovDistance() {
        bitField0_ = (bitField0_ & ~0x02000000);
        movDistance_ = 0F;
        onChanged();
        return this;
      }

      private float movBearing_ ;
      /**
       * <code>optional float mov_bearing = 27;</code>
       */
      public boolean hasMovBearing() {
        return ((bitField0_ & 0x04000000) == 0x04000000);
      }
      /**
       * <code>optional float mov_bearing = 27;</code>
       */
      public float getMovBearing() {
        return movBearing_;
      }
      /**
       * <code>optional float mov_bearing = 27;</code>
       */
      public Builder setMovBearing(float value) {
        bitField0_ |= 0x04000000;
        movBearing_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float mov_bearing = 27;</code>
       */
      public Builder clearMovBearing() {
        bitField0_ = (bitField0_ & ~0x04000000);
        movBearing_ = 0F;
        onChanged();
        return this;
      }

      private float movVelX_ ;
      /**
       * <code>optional float mov_vel_x = 28;</code>
       */
      public boolean hasMovVelX() {
        return ((bitField0_ & 0x08000000) == 0x08000000);
      }
      /**
       * <code>optional float mov_vel_x = 28;</code>
       */
      public float getMovVelX() {
        return movVelX_;
      }
      /**
       * <code>optional float mov_vel_x = 28;</code>
       */
      public Builder setMovVelX(float value) {
        bitField0_ |= 0x08000000;
        movVelX_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float mov_vel_x = 28;</code>
       */
      public Builder clearMovVelX() {
        bitField0_ = (bitField0_ & ~0x08000000);
        movVelX_ = 0F;
        onChanged();
        return this;
      }

      private float movVelY_ ;
      /**
       * <code>optional float mov_vel_y = 29;</code>
       */
      public boolean hasMovVelY() {
        return ((bitField0_ & 0x10000000) == 0x10000000);
      }
      /**
       * <code>optional float mov_vel_y = 29;</code>
       */
      public float getMovVelY() {
        return movVelY_;
      }
      /**
       * <code>optional float mov_vel_y = 29;</code>
       */
      public Builder setMovVelY(float value) {
        bitField0_ |= 0x10000000;
        movVelY_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float mov_vel_y = 29;</code>
       */
      public Builder clearMovVelY() {
        bitField0_ = (bitField0_ & ~0x10000000);
        movVelY_ = 0F;
        onChanged();
        return this;
      }

      private float movSpeed_ ;
      /**
       * <code>optional float mov_speed = 30;</code>
       */
      public boolean hasMovSpeed() {
        return ((bitField0_ & 0x20000000) == 0x20000000);
      }
      /**
       * <code>optional float mov_speed = 30;</code>
       */
      public float getMovSpeed() {
        return movSpeed_;
      }
      /**
       * <code>optional float mov_speed = 30;</code>
       */
      public Builder setMovSpeed(float value) {
        bitField0_ |= 0x20000000;
        movSpeed_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float mov_speed = 30;</code>
       */
      public Builder clearMovSpeed() {
        bitField0_ = (bitField0_ & ~0x20000000);
        movSpeed_ = 0F;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:messages.FilteredBall)
    }

    static {
      defaultInstance = new FilteredBall(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:messages.FilteredBall)
  }

  public interface SharedBallOrBuilder extends
      // @@protoc_insertion_point(interface_extends:messages.SharedBall)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional float x = 1;</code>
     */
    boolean hasX();
    /**
     * <code>optional float x = 1;</code>
     */
    float getX();

    /**
     * <code>optional float y = 2;</code>
     */
    boolean hasY();
    /**
     * <code>optional float y = 2;</code>
     */
    float getY();

    /**
     * <code>optional bool ball_on = 3;</code>
     */
    boolean hasBallOn();
    /**
     * <code>optional bool ball_on = 3;</code>
     */
    boolean getBallOn();

    /**
     * <code>optional int32 reliability = 4;</code>
     */
    boolean hasReliability();
    /**
     * <code>optional int32 reliability = 4;</code>
     */
    int getReliability();
  }
  /**
   * Protobuf type {@code messages.SharedBall}
   */
  public static final class SharedBall extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:messages.SharedBall)
      SharedBallOrBuilder {
    // Use SharedBall.newBuilder() to construct.
    private SharedBall(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private SharedBall(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final SharedBall defaultInstance;
    public static SharedBall getDefaultInstance() {
      return defaultInstance;
    }

    public SharedBall getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private SharedBall(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 13: {
              bitField0_ |= 0x00000001;
              x_ = input.readFloat();
              break;
            }
            case 21: {
              bitField0_ |= 0x00000002;
              y_ = input.readFloat();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              ballOn_ = input.readBool();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              reliability_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return messages.BallModel.internal_static_messages_SharedBall_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return messages.BallModel.internal_static_messages_SharedBall_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              messages.BallModel.SharedBall.class, messages.BallModel.SharedBall.Builder.class);
    }

    public static com.google.protobuf.Parser<SharedBall> PARSER =
        new com.google.protobuf.AbstractParser<SharedBall>() {
      public SharedBall parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SharedBall(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<SharedBall> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int X_FIELD_NUMBER = 1;
    private float x_;
    /**
     * <code>optional float x = 1;</code>
     */
    public boolean hasX() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional float x = 1;</code>
     */
    public float getX() {
      return x_;
    }

    public static final int Y_FIELD_NUMBER = 2;
    private float y_;
    /**
     * <code>optional float y = 2;</code>
     */
    public boolean hasY() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional float y = 2;</code>
     */
    public float getY() {
      return y_;
    }

    public static final int BALL_ON_FIELD_NUMBER = 3;
    private boolean ballOn_;
    /**
     * <code>optional bool ball_on = 3;</code>
     */
    public boolean hasBallOn() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional bool ball_on = 3;</code>
     */
    public boolean getBallOn() {
      return ballOn_;
    }

    public static final int RELIABILITY_FIELD_NUMBER = 4;
    private int reliability_;
    /**
     * <code>optional int32 reliability = 4;</code>
     */
    public boolean hasReliability() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 reliability = 4;</code>
     */
    public int getReliability() {
      return reliability_;
    }

    private void initFields() {
      x_ = 0F;
      y_ = 0F;
      ballOn_ = false;
      reliability_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeFloat(1, x_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeFloat(2, y_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBool(3, ballOn_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(4, reliability_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(1, x_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(2, y_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3, ballOn_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, reliability_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static messages.BallModel.SharedBall parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static messages.BallModel.SharedBall parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static messages.BallModel.SharedBall parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static messages.BallModel.SharedBall parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static messages.BallModel.SharedBall parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static messages.BallModel.SharedBall parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static messages.BallModel.SharedBall parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static messages.BallModel.SharedBall parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static messages.BallModel.SharedBall parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static messages.BallModel.SharedBall parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(messages.BallModel.SharedBall prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code messages.SharedBall}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:messages.SharedBall)
        messages.BallModel.SharedBallOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return messages.BallModel.internal_static_messages_SharedBall_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return messages.BallModel.internal_static_messages_SharedBall_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                messages.BallModel.SharedBall.class, messages.BallModel.SharedBall.Builder.class);
      }

      // Construct using messages.BallModel.SharedBall.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        x_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000001);
        y_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000002);
        ballOn_ = false;
        bitField0_ = (bitField0_ & ~0x00000004);
        reliability_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return messages.BallModel.internal_static_messages_SharedBall_descriptor;
      }

      public messages.BallModel.SharedBall getDefaultInstanceForType() {
        return messages.BallModel.SharedBall.getDefaultInstance();
      }

      public messages.BallModel.SharedBall build() {
        messages.BallModel.SharedBall result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public messages.BallModel.SharedBall buildPartial() {
        messages.BallModel.SharedBall result = new messages.BallModel.SharedBall(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.x_ = x_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.y_ = y_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.ballOn_ = ballOn_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.reliability_ = reliability_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof messages.BallModel.SharedBall) {
          return mergeFrom((messages.BallModel.SharedBall)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(messages.BallModel.SharedBall other) {
        if (other == messages.BallModel.SharedBall.getDefaultInstance()) return this;
        if (other.hasX()) {
          setX(other.getX());
        }
        if (other.hasY()) {
          setY(other.getY());
        }
        if (other.hasBallOn()) {
          setBallOn(other.getBallOn());
        }
        if (other.hasReliability()) {
          setReliability(other.getReliability());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        messages.BallModel.SharedBall parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (messages.BallModel.SharedBall) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private float x_ ;
      /**
       * <code>optional float x = 1;</code>
       */
      public boolean hasX() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional float x = 1;</code>
       */
      public float getX() {
        return x_;
      }
      /**
       * <code>optional float x = 1;</code>
       */
      public Builder setX(float value) {
        bitField0_ |= 0x00000001;
        x_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float x = 1;</code>
       */
      public Builder clearX() {
        bitField0_ = (bitField0_ & ~0x00000001);
        x_ = 0F;
        onChanged();
        return this;
      }

      private float y_ ;
      /**
       * <code>optional float y = 2;</code>
       */
      public boolean hasY() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional float y = 2;</code>
       */
      public float getY() {
        return y_;
      }
      /**
       * <code>optional float y = 2;</code>
       */
      public Builder setY(float value) {
        bitField0_ |= 0x00000002;
        y_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float y = 2;</code>
       */
      public Builder clearY() {
        bitField0_ = (bitField0_ & ~0x00000002);
        y_ = 0F;
        onChanged();
        return this;
      }

      private boolean ballOn_ ;
      /**
       * <code>optional bool ball_on = 3;</code>
       */
      public boolean hasBallOn() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional bool ball_on = 3;</code>
       */
      public boolean getBallOn() {
        return ballOn_;
      }
      /**
       * <code>optional bool ball_on = 3;</code>
       */
      public Builder setBallOn(boolean value) {
        bitField0_ |= 0x00000004;
        ballOn_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool ball_on = 3;</code>
       */
      public Builder clearBallOn() {
        bitField0_ = (bitField0_ & ~0x00000004);
        ballOn_ = false;
        onChanged();
        return this;
      }

      private int reliability_ ;
      /**
       * <code>optional int32 reliability = 4;</code>
       */
      public boolean hasReliability() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 reliability = 4;</code>
       */
      public int getReliability() {
        return reliability_;
      }
      /**
       * <code>optional int32 reliability = 4;</code>
       */
      public Builder setReliability(int value) {
        bitField0_ |= 0x00000008;
        reliability_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 reliability = 4;</code>
       */
      public Builder clearReliability() {
        bitField0_ = (bitField0_ & ~0x00000008);
        reliability_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:messages.SharedBall)
    }

    static {
      defaultInstance = new SharedBall(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:messages.SharedBall)
  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_messages_VisionBall_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_messages_VisionBall_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_messages_FilteredBall_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_messages_FilteredBall_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_messages_SharedBall_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_messages_SharedBall_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\017BallModel.proto\022\010messages\"\261\002\n\nVisionBa" +
      "ll\022\020\n\010distance\030\001 \001(\001\022\017\n\007bearing\030\002 \001(\001\022\023\n" +
      "\013angle_x_deg\030\003 \001(\001\022\023\n\013angle_y_deg\030\004 \001(\001\022" +
      "\022\n\nbearing_sd\030\005 \001(\001\022\020\n\010inTopCam\030\006 \001(\010\022\016\n" +
      "\006radius\030\007 \001(\001\022\022\n\nconfidence\030\010 \001(\001\022\n\n\002on\030" +
      "\t \001(\010\022\021\n\tframes_on\030\n \001(\021\022\022\n\nframes_off\030\013" +
      " \001(\021\022\026\n\016rel_x_variance\030\014 \001(\001\022\026\n\016rel_y_va" +
      "riance\030\r \001(\001\022\023\n\013bearing_deg\030\016 \001(\001\022\t\n\001x\030\017" +
      " \001(\021\022\t\n\001y\030\020 \001(\021\"\322\004\n\014FilteredBall\022!\n\003vis\030" +
      "\001 \001(\0132\024.messages.VisionBall\022\020\n\010distance\030",
      "\002 \001(\002\022\017\n\007bearing\030\003 \001(\002\022\r\n\005rel_x\030\004 \001(\002\022\r\n" +
      "\005rel_y\030\005 \001(\002\022\r\n\005vel_x\030\006 \001(\002\022\r\n\005vel_y\030\007 \001" +
      "(\002\022\021\n\tvar_rel_x\030\010 \001(\002\022\021\n\tvar_rel_y\030\t \001(\002" +
      "\022\021\n\tvar_vel_x\030\n \001(\002\022\021\n\tvar_vel_y\030\013 \001(\002\022\025" +
      "\n\ris_stationary\030\014 \001(\010\022\023\n\013bearing_deg\030\r \001" +
      "(\002\022\t\n\001x\030\016 \001(\002\022\t\n\001y\030\017 \001(\002\022\022\n\nrel_x_dest\030\020" +
      " \001(\002\022\022\n\nrel_y_dest\030\021 \001(\002\022\r\n\005speed\030\022 \001(\002\022" +
      "\034\n\024rel_y_intersect_dest\030\023 \001(\002\022\022\n\nstat_re" +
      "l_x\030\024 \001(\002\022\022\n\nstat_rel_y\030\025 \001(\002\022\025\n\rstat_di" +
      "stance\030\026 \001(\002\022\024\n\014stat_bearing\030\027 \001(\002\022\021\n\tmo",
      "v_rel_x\030\030 \001(\002\022\021\n\tmov_rel_y\030\031 \001(\002\022\024\n\014mov_" +
      "distance\030\032 \001(\002\022\023\n\013mov_bearing\030\033 \001(\002\022\021\n\tm" +
      "ov_vel_x\030\034 \001(\002\022\021\n\tmov_vel_y\030\035 \001(\002\022\021\n\tmov" +
      "_speed\030\036 \001(\002\"H\n\nSharedBall\022\t\n\001x\030\001 \001(\002\022\t\n" +
      "\001y\030\002 \001(\002\022\017\n\007ball_on\030\003 \001(\010\022\023\n\013reliability" +
      "\030\004 \001(\005"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_messages_VisionBall_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_messages_VisionBall_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_messages_VisionBall_descriptor,
        new java.lang.String[] { "Distance", "Bearing", "AngleXDeg", "AngleYDeg", "BearingSd", "InTopCam", "Radius", "Confidence", "On", "FramesOn", "FramesOff", "RelXVariance", "RelYVariance", "BearingDeg", "X", "Y", });
    internal_static_messages_FilteredBall_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_messages_FilteredBall_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_messages_FilteredBall_descriptor,
        new java.lang.String[] { "Vis", "Distance", "Bearing", "RelX", "RelY", "VelX", "VelY", "VarRelX", "VarRelY", "VarVelX", "VarVelY", "IsStationary", "BearingDeg", "X", "Y", "RelXDest", "RelYDest", "Speed", "RelYIntersectDest", "StatRelX", "StatRelY", "StatDistance", "StatBearing", "MovRelX", "MovRelY", "MovDistance", "MovBearing", "MovVelX", "MovVelY", "MovSpeed", });
    internal_static_messages_SharedBall_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_messages_SharedBall_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_messages_SharedBall_descriptor,
        new java.lang.String[] { "X", "Y", "BallOn", "Reliability", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
